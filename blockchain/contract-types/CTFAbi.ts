/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CTFAbiInterface extends utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "payoutNumerators(bytes32,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "payoutDenominator(bytes32)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "prepareCondition(address,bytes32,uint256)": FunctionFragment;
    "reportPayouts(bytes32,uint256[])": FunctionFragment;
    "splitPosition(address,bytes32,bytes32,uint256[],uint256)": FunctionFragment;
    "mergePositions(address,bytes32,bytes32,uint256[],uint256)": FunctionFragment;
    "redeemPositions(address,bytes32,bytes32,uint256[])": FunctionFragment;
    "getOutcomeSlotCount(bytes32)": FunctionFragment;
    "getConditionId(address,bytes32,uint256)": FunctionFragment;
    "getCollectionId(bytes32,bytes32,uint256)": FunctionFragment;
    "getPositionId(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "supportsInterface"
      | "payoutNumerators"
      | "safeBatchTransferFrom"
      | "balanceOfBatch"
      | "setApprovalForAll"
      | "payoutDenominator"
      | "isApprovedForAll"
      | "safeTransferFrom"
      | "prepareCondition"
      | "reportPayouts"
      | "splitPosition"
      | "mergePositions"
      | "redeemPositions"
      | "getOutcomeSlotCount"
      | "getConditionId"
      | "getCollectionId"
      | "getPositionId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutNumerators",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutDenominator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareCondition",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportPayouts",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "splitPosition",
    values: [string, BytesLike, BytesLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergePositions",
    values: [string, BytesLike, BytesLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPositions",
    values: [string, BytesLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutcomeSlotCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConditionId",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionId",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionId",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutNumerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutcomeSlotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionId",
    data: BytesLike
  ): Result;

  events: {
    "ConditionPreparation(bytes32,address,bytes32,uint256)": EventFragment;
    "ConditionResolution(bytes32,address,bytes32,uint256,uint256[])": EventFragment;
    "PositionSplit(address,address,bytes32,bytes32,uint256[],uint256)": EventFragment;
    "PositionsMerge(address,address,bytes32,bytes32,uint256[],uint256)": EventFragment;
    "PayoutRedemption(address,address,bytes32,bytes32,uint256[],uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConditionPreparation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionResolution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionsMerge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ConditionPreparationEventObject {
  conditionId: string;
  oracle: string;
  questionId: string;
  outcomeSlotCount: BigNumber;
}
export type ConditionPreparationEvent = TypedEvent<
  [string, string, string, BigNumber],
  ConditionPreparationEventObject
>;

export type ConditionPreparationEventFilter =
  TypedEventFilter<ConditionPreparationEvent>;

export interface ConditionResolutionEventObject {
  conditionId: string;
  oracle: string;
  questionId: string;
  outcomeSlotCount: BigNumber;
  payoutNumerators: BigNumber[];
}
export type ConditionResolutionEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber[]],
  ConditionResolutionEventObject
>;

export type ConditionResolutionEventFilter =
  TypedEventFilter<ConditionResolutionEvent>;

export interface PositionSplitEventObject {
  stakeholder: string;
  collateralToken: string;
  parentCollectionId: string;
  conditionId: string;
  partition: BigNumber[];
  amount: BigNumber;
}
export type PositionSplitEvent = TypedEvent<
  [string, string, string, string, BigNumber[], BigNumber],
  PositionSplitEventObject
>;

export type PositionSplitEventFilter = TypedEventFilter<PositionSplitEvent>;

export interface PositionsMergeEventObject {
  stakeholder: string;
  collateralToken: string;
  parentCollectionId: string;
  conditionId: string;
  partition: BigNumber[];
  amount: BigNumber;
}
export type PositionsMergeEvent = TypedEvent<
  [string, string, string, string, BigNumber[], BigNumber],
  PositionsMergeEventObject
>;

export type PositionsMergeEventFilter = TypedEventFilter<PositionsMergeEvent>;

export interface PayoutRedemptionEventObject {
  redeemer: string;
  collateralToken: string;
  parentCollectionId: string;
  conditionId: string;
  indexSets: BigNumber[];
  payout: BigNumber;
}
export type PayoutRedemptionEvent = TypedEvent<
  [string, string, string, string, BigNumber[], BigNumber],
  PayoutRedemptionEventObject
>;

export type PayoutRedemptionEventFilter =
  TypedEventFilter<PayoutRedemptionEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface CTFAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTFAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payoutNumerators(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payoutDenominator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    prepareCondition(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportPayouts(
      questionId: BytesLike,
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    splitPosition(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mergePositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemPositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSets: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOutcomeSlotCount(
      conditionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConditionId(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollectionId(
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPositionId(
      collateralToken: string,
      collectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceOf(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payoutNumerators(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payoutDenominator(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  prepareCondition(
    oracle: string,
    questionId: BytesLike,
    outcomeSlotCount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportPayouts(
    questionId: BytesLike,
    payouts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  splitPosition(
    collateralToken: string,
    parentCollectionId: BytesLike,
    conditionId: BytesLike,
    partition: BigNumberish[],
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mergePositions(
    collateralToken: string,
    parentCollectionId: BytesLike,
    conditionId: BytesLike,
    partition: BigNumberish[],
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemPositions(
    collateralToken: string,
    parentCollectionId: BytesLike,
    conditionId: BytesLike,
    indexSets: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOutcomeSlotCount(
    conditionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConditionId(
    oracle: string,
    questionId: BytesLike,
    outcomeSlotCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollectionId(
    parentCollectionId: BytesLike,
    conditionId: BytesLike,
    indexSet: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPositionId(
    collateralToken: string,
    collectionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payoutNumerators(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    payoutDenominator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    prepareCondition(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reportPayouts(
      questionId: BytesLike,
      payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    splitPosition(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergePositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getOutcomeSlotCount(
      conditionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionId(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollectionId(
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPositionId(
      collateralToken: string,
      collectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ConditionPreparation(bytes32,address,bytes32,uint256)"(
      conditionId?: BytesLike | null,
      oracle?: string | null,
      questionId?: BytesLike | null,
      outcomeSlotCount?: null
    ): ConditionPreparationEventFilter;
    ConditionPreparation(
      conditionId?: BytesLike | null,
      oracle?: string | null,
      questionId?: BytesLike | null,
      outcomeSlotCount?: null
    ): ConditionPreparationEventFilter;

    "ConditionResolution(bytes32,address,bytes32,uint256,uint256[])"(
      conditionId?: BytesLike | null,
      oracle?: string | null,
      questionId?: BytesLike | null,
      outcomeSlotCount?: null,
      payoutNumerators?: null
    ): ConditionResolutionEventFilter;
    ConditionResolution(
      conditionId?: BytesLike | null,
      oracle?: string | null,
      questionId?: BytesLike | null,
      outcomeSlotCount?: null,
      payoutNumerators?: null
    ): ConditionResolutionEventFilter;

    "PositionSplit(address,address,bytes32,bytes32,uint256[],uint256)"(
      stakeholder?: string | null,
      collateralToken?: null,
      parentCollectionId?: BytesLike | null,
      conditionId?: BytesLike | null,
      partition?: null,
      amount?: null
    ): PositionSplitEventFilter;
    PositionSplit(
      stakeholder?: string | null,
      collateralToken?: null,
      parentCollectionId?: BytesLike | null,
      conditionId?: BytesLike | null,
      partition?: null,
      amount?: null
    ): PositionSplitEventFilter;

    "PositionsMerge(address,address,bytes32,bytes32,uint256[],uint256)"(
      stakeholder?: string | null,
      collateralToken?: null,
      parentCollectionId?: BytesLike | null,
      conditionId?: BytesLike | null,
      partition?: null,
      amount?: null
    ): PositionsMergeEventFilter;
    PositionsMerge(
      stakeholder?: string | null,
      collateralToken?: null,
      parentCollectionId?: BytesLike | null,
      conditionId?: BytesLike | null,
      partition?: null,
      amount?: null
    ): PositionsMergeEventFilter;

    "PayoutRedemption(address,address,bytes32,bytes32,uint256[],uint256)"(
      redeemer?: string | null,
      collateralToken?: string | null,
      parentCollectionId?: BytesLike | null,
      conditionId?: null,
      indexSets?: null,
      payout?: null
    ): PayoutRedemptionEventFilter;
    PayoutRedemption(
      redeemer?: string | null,
      collateralToken?: string | null,
      parentCollectionId?: BytesLike | null,
      conditionId?: null,
      indexSets?: null,
      payout?: null
    ): PayoutRedemptionEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutNumerators(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payoutDenominator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    prepareCondition(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportPayouts(
      questionId: BytesLike,
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    splitPosition(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mergePositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemPositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSets: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOutcomeSlotCount(
      conditionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionId(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionId(
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionId(
      collateralToken: string,
      collectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutNumerators(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payoutDenominator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    prepareCondition(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportPayouts(
      questionId: BytesLike,
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    splitPosition(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mergePositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      partition: BigNumberish[],
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemPositions(
      collateralToken: string,
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSets: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOutcomeSlotCount(
      conditionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConditionId(
      oracle: string,
      questionId: BytesLike,
      outcomeSlotCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionId(
      parentCollectionId: BytesLike,
      conditionId: BytesLike,
      indexSet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionId(
      collateralToken: string,
      collectionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
