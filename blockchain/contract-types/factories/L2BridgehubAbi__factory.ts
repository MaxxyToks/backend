/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  L2BridgehubAbi,
  L2BridgehubAbiInterface,
} from "../L2BridgehubAbi";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "l1Vault_",
        type: "address",
        internalType: "address",
      },
      {
        name: "bridgedErc20Implementation_",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "BRIDGEDERC20_BEACON",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "BRIDGED_ERC20_IMPLEMENTATION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "L1VAULT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getL1Erc20SavedMetadata",
    inputs: [
      {
        name: "l1Erc20Address_",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getL1UserDepositedTokens",
    inputs: [
      {
        name: "l1Erc20Address_",
        type: "address",
        internalType: "address",
      },
      {
        name: "user_",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "l2CounterpartErc20Addresses",
    inputs: [
      {
        name: "l1Erc20Address",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "l2Erc20Address",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "userWithdrawals",
    inputs: [
      {
        name: "erc20Address",
        type: "address",
        internalType: "address",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "l1Erc20Address_",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "WithdrawAmountEceedDeposits",
    inputs: [
      {
        name: "totalWithdrawnAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "withdrawnAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroValue",
    inputs: [],
  },
] as const;

export class L2BridgehubAbi__factory {
  static readonly abi = _abi;
  static createInterface(): L2BridgehubAbiInterface {
    return new utils.Interface(_abi) as L2BridgehubAbiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2BridgehubAbi {
    return new Contract(address, _abi, signerOrProvider) as L2BridgehubAbi;
  }
}
