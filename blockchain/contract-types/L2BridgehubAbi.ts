/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L2BridgehubAbiInterface extends utils.Interface {
  functions: {
    "BRIDGEDERC20_BEACON()": FunctionFragment;
    "BRIDGED_ERC20_IMPLEMENTATION()": FunctionFragment;
    "L1VAULT()": FunctionFragment;
    "getL1Erc20SavedMetadata(address)": FunctionFragment;
    "getL1UserDepositedTokens(address,address)": FunctionFragment;
    "l2CounterpartErc20Addresses(address)": FunctionFragment;
    "userWithdrawals(address,address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGEDERC20_BEACON"
      | "BRIDGED_ERC20_IMPLEMENTATION"
      | "L1VAULT"
      | "getL1Erc20SavedMetadata"
      | "getL1UserDepositedTokens"
      | "l2CounterpartErc20Addresses"
      | "userWithdrawals"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGEDERC20_BEACON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGED_ERC20_IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "L1VAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getL1Erc20SavedMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1UserDepositedTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "l2CounterpartErc20Addresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawals",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRIDGEDERC20_BEACON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGED_ERC20_IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "L1VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getL1Erc20SavedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1UserDepositedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2CounterpartErc20Addresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface L2BridgehubAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2BridgehubAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGEDERC20_BEACON(overrides?: CallOverrides): Promise<[string]>;

    BRIDGED_ERC20_IMPLEMENTATION(overrides?: CallOverrides): Promise<[string]>;

    L1VAULT(overrides?: CallOverrides): Promise<[string]>;

    getL1Erc20SavedMetadata(
      l1Erc20Address_: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    getL1UserDepositedTokens(
      l1Erc20Address_: string,
      user_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l2CounterpartErc20Addresses(
      l1Erc20Address: string,
      overrides?: CallOverrides
    ): Promise<[string] & { l2Erc20Address: string }>;

    userWithdrawals(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    withdraw(
      l1Erc20Address_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BRIDGEDERC20_BEACON(overrides?: CallOverrides): Promise<string>;

  BRIDGED_ERC20_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

  L1VAULT(overrides?: CallOverrides): Promise<string>;

  getL1Erc20SavedMetadata(
    l1Erc20Address_: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      name: string;
      symbol: string;
      decimals: number;
    }
  >;

  getL1UserDepositedTokens(
    l1Erc20Address_: string,
    user_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l2CounterpartErc20Addresses(
    l1Erc20Address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  userWithdrawals(
    erc20Address: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    l1Erc20Address_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGEDERC20_BEACON(overrides?: CallOverrides): Promise<string>;

    BRIDGED_ERC20_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

    L1VAULT(overrides?: CallOverrides): Promise<string>;

    getL1Erc20SavedMetadata(
      l1Erc20Address_: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    getL1UserDepositedTokens(
      l1Erc20Address_: string,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2CounterpartErc20Addresses(
      l1Erc20Address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userWithdrawals(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      l1Erc20Address_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BRIDGEDERC20_BEACON(overrides?: CallOverrides): Promise<BigNumber>;

    BRIDGED_ERC20_IMPLEMENTATION(overrides?: CallOverrides): Promise<BigNumber>;

    L1VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    getL1Erc20SavedMetadata(
      l1Erc20Address_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL1UserDepositedTokens(
      l1Erc20Address_: string,
      user_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2CounterpartErc20Addresses(
      l1Erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWithdrawals(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      l1Erc20Address_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGEDERC20_BEACON(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BRIDGED_ERC20_IMPLEMENTATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    L1VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL1Erc20SavedMetadata(
      l1Erc20Address_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL1UserDepositedTokens(
      l1Erc20Address_: string,
      user_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2CounterpartErc20Addresses(
      l1Erc20Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWithdrawals(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      l1Erc20Address_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
