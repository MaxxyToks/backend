/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FaucetAbiInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FAUCET_MANAGER_ROLE()": FunctionFragment;
    "__Initializer()": FunctionFragment;
    "addBulkToWhitelist(address[],bool)": FunctionFragment;
    "addFunds()": FunctionFragment;
    "addToWhitelist(address,bool)": FunctionFragment;
    "faucetAmount()": FunctionFragment;
    "faucetAvailable(address)": FunctionFragment;
    "faucetLockInterval()": FunctionFragment;
    "faucetWhitelist(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lkb34asd30tkd(address)": FunctionFragment;
    "lmfgt43fdd(address)": FunctionFragment;
    "lockTime(address)": FunctionFragment;
    "mgt34mah56mg1(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "rescueERC20Token(address,uint256,address)": FunctionFragment;
    "rescueNativeToken(uint256,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFaucetAmount(uint256)": FunctionFragment;
    "setFaucetLockInterval(uint256)": FunctionFragment;
    "setFaucetWithWhitelist(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "useWhitelist()": FunctionFragment;
    "userInWhitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "FAUCET_MANAGER_ROLE"
      | "__Initializer"
      | "addBulkToWhitelist"
      | "addFunds"
      | "addToWhitelist"
      | "faucetAmount"
      | "faucetAvailable"
      | "faucetLockInterval"
      | "faucetWhitelist"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "lkb34asd30tkd"
      | "lmfgt43fdd"
      | "lockTime"
      | "mgt34mah56mg1"
      | "owner"
      | "renounceOwnership"
      | "renounceRole"
      | "rescueERC20Token"
      | "rescueNativeToken"
      | "revokeRole"
      | "setFaucetAmount"
      | "setFaucetLockInterval"
      | "setFaucetWithWhitelist"
      | "supportsInterface"
      | "transferOwnership"
      | "useWhitelist"
      | "userInWhitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAUCET_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Initializer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBulkToWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "faucetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faucetAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "faucetLockInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faucetWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lkb34asd30tkd",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lmfgt43fdd", values: [string]): string;
  encodeFunctionData(functionFragment: "lockTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mgt34mah56mg1",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20Token",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueNativeToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFaucetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFaucetLockInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFaucetWithWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "useWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInWhitelist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAUCET_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBulkToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faucetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faucetAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faucetLockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faucetWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lkb34asd30tkd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lmfgt43fdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mgt34mah56mg1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFaucetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFaucetLockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFaucetWithWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface FaucetAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaucetAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FAUCET_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __Initializer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addBulkToWhitelist(
      _addresses: string[],
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addFunds(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      _user: string,
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    faucetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    faucetAvailable(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    faucetLockInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    faucetWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lkb34asd30tkd(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lmfgt43fdd(
      _receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mgt34mah56mg1(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueERC20Token(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueNativeToken(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFaucetAmount(
      _faucetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFaucetLockInterval(
      _faucetLockInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFaucetWithWhitelist(
      _useWL: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    useWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    userInWhitelist(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FAUCET_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  __Initializer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addBulkToWhitelist(
    _addresses: string[],
    _isWhitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addFunds(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    _user: string,
    _isWhitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  faucetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  faucetAvailable(
    _receiver: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  faucetLockInterval(overrides?: CallOverrides): Promise<BigNumber>;

  faucetWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lkb34asd30tkd(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lmfgt43fdd(
    _receiver: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mgt34mah56mg1(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueERC20Token(
    _token: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueNativeToken(
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFaucetAmount(
    _faucetAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFaucetLockInterval(
    _faucetLockInterval: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFaucetWithWhitelist(
    _useWL: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  useWhitelist(overrides?: CallOverrides): Promise<boolean>;

  userInWhitelist(
    _receiver: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FAUCET_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    __Initializer(overrides?: CallOverrides): Promise<void>;

    addBulkToWhitelist(
      _addresses: string[],
      _isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addFunds(overrides?: CallOverrides): Promise<void>;

    addToWhitelist(
      _user: string,
      _isWhitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    faucetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    faucetAvailable(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    faucetLockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    faucetWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lkb34asd30tkd(account: string, overrides?: CallOverrides): Promise<void>;

    lmfgt43fdd(_receiver: string, overrides?: CallOverrides): Promise<void>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mgt34mah56mg1(account: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueERC20Token(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueNativeToken(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFaucetAmount(
      _faucetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFaucetLockInterval(
      _faucetLockInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFaucetWithWhitelist(
      _useWL: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    useWhitelist(overrides?: CallOverrides): Promise<boolean>;

    userInWhitelist(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FAUCET_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __Initializer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addBulkToWhitelist(
      _addresses: string[],
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addFunds(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    addToWhitelist(
      _user: string,
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    faucetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    faucetAvailable(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    faucetLockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    faucetWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lkb34asd30tkd(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lmfgt43fdd(
      _receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mgt34mah56mg1(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueERC20Token(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueNativeToken(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFaucetAmount(
      _faucetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFaucetLockInterval(
      _faucetLockInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFaucetWithWhitelist(
      _useWL: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    useWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    userInWhitelist(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FAUCET_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __Initializer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addBulkToWhitelist(
      _addresses: string[],
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addFunds(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _user: string,
      _isWhitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    faucetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    faucetAvailable(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faucetLockInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faucetWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lkb34asd30tkd(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lmfgt43fdd(
      _receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mgt34mah56mg1(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueERC20Token(
      _token: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueNativeToken(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFaucetAmount(
      _faucetAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFaucetLockInterval(
      _faucetLockInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFaucetWithWhitelist(
      _useWL: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    useWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInWhitelist(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
