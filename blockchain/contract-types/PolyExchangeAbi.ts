/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type OrderStruct = {
  salt: BigNumberish;
  maker: string;
  signer: string;
  taker: string;
  tokenId: BigNumberish;
  makerAmount: BigNumberish;
  takerAmount: BigNumberish;
  expiration: BigNumberish;
  nonce: BigNumberish;
  feeRateBps: BigNumberish;
  side: BigNumberish;
  signatureType: BigNumberish;
  signature: BytesLike;
};

export type OrderStructOutput = [
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  string
] & {
  salt: BigNumber;
  maker: string;
  signer: string;
  taker: string;
  tokenId: BigNumber;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  expiration: BigNumber;
  nonce: BigNumber;
  feeRateBps: BigNumber;
  side: number;
  signatureType: number;
  signature: string;
};

export type OrderStatusStruct = {
  isFilledOrCancelled: boolean;
  remaining: BigNumberish;
};

export type OrderStatusStructOutput = [boolean, BigNumber] & {
  isFilledOrCancelled: boolean;
  remaining: BigNumber;
};

export interface PolyExchangeAbiInterface extends utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "cancelOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": FunctionFragment;
    "cancelOrders((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes)[])": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "fillOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes),uint256)": FunctionFragment;
    "fillOrders((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes)[],uint256[])": FunctionFragment;
    "getCollateral()": FunctionFragment;
    "getComplement(uint256)": FunctionFragment;
    "getConditionId(uint256)": FunctionFragment;
    "getCtf()": FunctionFragment;
    "getMaxFeeRate()": FunctionFragment;
    "getOrderStatus(bytes32)": FunctionFragment;
    "getPolyProxyFactoryImplementation()": FunctionFragment;
    "getPolyProxyWalletAddress(address)": FunctionFragment;
    "getProxyFactory()": FunctionFragment;
    "getSafeAddress(address)": FunctionFragment;
    "getSafeFactory()": FunctionFragment;
    "getSafeFactoryImplementation()": FunctionFragment;
    "hashOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": FunctionFragment;
    "incrementNonce()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "isValidNonce(address,uint256)": FunctionFragment;
    "matchOrders((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes),(uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes)[],uint256,uint256[])": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "operators(address)": FunctionFragment;
    "orderStatus(bytes32)": FunctionFragment;
    "parentCollectionId()": FunctionFragment;
    "pauseTrading()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxyFactory()": FunctionFragment;
    "registerToken(uint256,uint256,bytes32)": FunctionFragment;
    "registry(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceAdminRole()": FunctionFragment;
    "renounceOperatorRole()": FunctionFragment;
    "safeFactory()": FunctionFragment;
    "setProxyFactory(address)": FunctionFragment;
    "setSafeFactory(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpauseTrading()": FunctionFragment;
    "validateComplement(uint256,uint256)": FunctionFragment;
    "validateOrder((uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": FunctionFragment;
    "validateOrderSignature(bytes32,(uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": FunctionFragment;
    "validateTokenId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmin"
      | "addOperator"
      | "admins"
      | "cancelOrder"
      | "cancelOrders"
      | "domainSeparator"
      | "fillOrder"
      | "fillOrders"
      | "getCollateral"
      | "getComplement"
      | "getConditionId"
      | "getCtf"
      | "getMaxFeeRate"
      | "getOrderStatus"
      | "getPolyProxyFactoryImplementation"
      | "getPolyProxyWalletAddress"
      | "getProxyFactory"
      | "getSafeAddress"
      | "getSafeFactory"
      | "getSafeFactoryImplementation"
      | "hashOrder"
      | "incrementNonce"
      | "isAdmin"
      | "isOperator"
      | "isValidNonce"
      | "matchOrders"
      | "nonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "operators"
      | "orderStatus"
      | "parentCollectionId"
      | "pauseTrading"
      | "paused"
      | "proxyFactory"
      | "registerToken"
      | "registry"
      | "removeAdmin"
      | "removeOperator"
      | "renounceAdminRole"
      | "renounceOperatorRole"
      | "safeFactory"
      | "setProxyFactory"
      | "setSafeFactory"
      | "supportsInterface"
      | "unpauseTrading"
      | "validateComplement"
      | "validateOrder"
      | "validateOrderSignature"
      | "validateTokenId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "addOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [OrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrders",
    values: [OrderStruct[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConditionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCtf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolyProxyFactoryImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolyProxyWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeFactoryImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [OrderStruct, OrderStruct[], BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parentCollectionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOperatorRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateComplement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderSignature",
    values: [BytesLike, OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTokenId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCtf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolyProxyFactoryImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolyProxyWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeFactoryImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOperatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateComplement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTokenId",
    data: BytesLike
  ): Result;

  events: {
    "FeeCharged(address,uint256,uint256)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewOperator(address,address)": EventFragment;
    "OrderCancelled(bytes32)": EventFragment;
    "OrderFilled(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OrdersMatched(bytes32,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ProxyFactoryUpdated(address,address)": EventFragment;
    "RemovedAdmin(address,address)": EventFragment;
    "RemovedOperator(address,address)": EventFragment;
    "SafeFactoryUpdated(address,address)": EventFragment;
    "TokenRegistered(uint256,uint256,bytes32)": EventFragment;
    "TradingPaused(address)": EventFragment;
    "TradingUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyFactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeFactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingUnpaused"): EventFragment;
}

export interface FeeChargedEventObject {
  receiver: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type FeeChargedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FeeChargedEventObject
>;

export type FeeChargedEventFilter = TypedEventFilter<FeeChargedEvent>;

export interface NewAdminEventObject {
  newAdminAddress: string;
  admin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewOperatorEventObject {
  newOperatorAddress: string;
  admin: string;
}
export type NewOperatorEvent = TypedEvent<
  [string, string],
  NewOperatorEventObject
>;

export type NewOperatorEventFilter = TypedEventFilter<NewOperatorEvent>;

export interface OrderCancelledEventObject {
  orderHash: string;
}
export type OrderCancelledEvent = TypedEvent<
  [string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  makerAssetId: BigNumber;
  takerAssetId: BigNumber;
  makerAmountFilled: BigNumber;
  takerAmountFilled: BigNumber;
  fee: BigNumber;
}
export type OrderFilledEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  OrderFilledEventObject
>;

export type OrderFilledEventFilter = TypedEventFilter<OrderFilledEvent>;

export interface OrdersMatchedEventObject {
  takerOrderHash: string;
  takerOrderMaker: string;
  makerAssetId: BigNumber;
  takerAssetId: BigNumber;
  makerAmountFilled: BigNumber;
  takerAmountFilled: BigNumber;
}
export type OrdersMatchedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  OrdersMatchedEventObject
>;

export type OrdersMatchedEventFilter = TypedEventFilter<OrdersMatchedEvent>;

export interface ProxyFactoryUpdatedEventObject {
  oldProxyFactory: string;
  newProxyFactory: string;
}
export type ProxyFactoryUpdatedEvent = TypedEvent<
  [string, string],
  ProxyFactoryUpdatedEventObject
>;

export type ProxyFactoryUpdatedEventFilter =
  TypedEventFilter<ProxyFactoryUpdatedEvent>;

export interface RemovedAdminEventObject {
  removedAdmin: string;
  admin: string;
}
export type RemovedAdminEvent = TypedEvent<
  [string, string],
  RemovedAdminEventObject
>;

export type RemovedAdminEventFilter = TypedEventFilter<RemovedAdminEvent>;

export interface RemovedOperatorEventObject {
  removedOperator: string;
  admin: string;
}
export type RemovedOperatorEvent = TypedEvent<
  [string, string],
  RemovedOperatorEventObject
>;

export type RemovedOperatorEventFilter = TypedEventFilter<RemovedOperatorEvent>;

export interface SafeFactoryUpdatedEventObject {
  oldSafeFactory: string;
  newSafeFactory: string;
}
export type SafeFactoryUpdatedEvent = TypedEvent<
  [string, string],
  SafeFactoryUpdatedEventObject
>;

export type SafeFactoryUpdatedEventFilter =
  TypedEventFilter<SafeFactoryUpdatedEvent>;

export interface TokenRegisteredEventObject {
  token0: BigNumber;
  token1: BigNumber;
  conditionId: string;
}
export type TokenRegisteredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  TokenRegisteredEventObject
>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface TradingPausedEventObject {
  pauser: string;
}
export type TradingPausedEvent = TypedEvent<[string], TradingPausedEventObject>;

export type TradingPausedEventFilter = TypedEventFilter<TradingPausedEvent>;

export interface TradingUnpausedEventObject {
  pauser: string;
}
export type TradingUnpausedEvent = TypedEvent<
  [string],
  TradingUnpausedEventObject
>;

export type TradingUnpausedEventFilter = TypedEventFilter<TradingUnpausedEvent>;

export interface PolyExchangeAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolyExchangeAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      admin_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addOperator(
      operator_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    admins(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelOrders(
      orders: OrderStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    fillOrder(
      order: OrderStruct,
      fillAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fillOrders(
      orders: OrderStruct[],
      fillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollateral(overrides?: CallOverrides): Promise<[string]>;

    getComplement(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConditionId(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCtf(overrides?: CallOverrides): Promise<[string]>;

    getMaxFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrderStatus(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[OrderStatusStructOutput]>;

    getPolyProxyFactoryImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPolyProxyWalletAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProxyFactory(overrides?: CallOverrides): Promise<[string]>;

    getSafeAddress(_addr: string, overrides?: CallOverrides): Promise<[string]>;

    getSafeFactory(overrides?: CallOverrides): Promise<[string]>;

    getSafeFactoryImplementation(overrides?: CallOverrides): Promise<[string]>;

    hashOrder(order: OrderStruct, overrides?: CallOverrides): Promise<[string]>;

    incrementNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAdmin(usr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(usr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isValidNonce(
      usr: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    matchOrders(
      takerOrder: OrderStruct,
      makerOrders: OrderStruct[],
      takerFillAmount: BigNumberish,
      makerFillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    orderStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isFilledOrCancelled: boolean;
        remaining: BigNumber;
      }
    >;

    parentCollectionId(overrides?: CallOverrides): Promise<[string]>;

    pauseTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxyFactory(overrides?: CallOverrides): Promise<[string]>;

    registerToken(
      token: BigNumberish,
      complement: BigNumberish,
      conditionId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { complement: BigNumber; conditionId: string }
    >;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceAdminRole(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOperatorRole(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<[string]>;

    setProxyFactory(
      _newProxyFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSafeFactory(
      _newSafeFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpauseTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateComplement(
      token: BigNumberish,
      complement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateOrderSignature(
      orderHash: BytesLike,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addAdmin(
    admin_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addOperator(
    operator_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrder(
    order: OrderStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelOrders(
    orders: OrderStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  fillOrder(
    order: OrderStruct,
    fillAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fillOrders(
    orders: OrderStruct[],
    fillAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollateral(overrides?: CallOverrides): Promise<string>;

  getComplement(
    token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConditionId(
    token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCtf(overrides?: CallOverrides): Promise<string>;

  getMaxFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderStatus(
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<OrderStatusStructOutput>;

  getPolyProxyFactoryImplementation(overrides?: CallOverrides): Promise<string>;

  getPolyProxyWalletAddress(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getProxyFactory(overrides?: CallOverrides): Promise<string>;

  getSafeAddress(_addr: string, overrides?: CallOverrides): Promise<string>;

  getSafeFactory(overrides?: CallOverrides): Promise<string>;

  getSafeFactoryImplementation(overrides?: CallOverrides): Promise<string>;

  hashOrder(order: OrderStruct, overrides?: CallOverrides): Promise<string>;

  incrementNonce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAdmin(usr: string, overrides?: CallOverrides): Promise<boolean>;

  isOperator(usr: string, overrides?: CallOverrides): Promise<boolean>;

  isValidNonce(
    usr: string,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  matchOrders(
    takerOrder: OrderStruct,
    makerOrders: OrderStruct[],
    takerFillAmount: BigNumberish,
    makerFillAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  orderStatus(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      isFilledOrCancelled: boolean;
      remaining: BigNumber;
    }
  >;

  parentCollectionId(overrides?: CallOverrides): Promise<string>;

  pauseTrading(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxyFactory(overrides?: CallOverrides): Promise<string>;

  registerToken(
    token: BigNumberish,
    complement: BigNumberish,
    conditionId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registry(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { complement: BigNumber; conditionId: string }
  >;

  removeAdmin(
    admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceAdminRole(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOperatorRole(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeFactory(overrides?: CallOverrides): Promise<string>;

  setProxyFactory(
    _newProxyFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSafeFactory(
    _newSafeFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpauseTrading(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateComplement(
    token: BigNumberish,
    complement: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateOrder(order: OrderStruct, overrides?: CallOverrides): Promise<void>;

  validateOrderSignature(
    orderHash: BytesLike,
    order: OrderStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateTokenId(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    addAdmin(admin_: string, overrides?: CallOverrides): Promise<void>;

    addOperator(operator_: string, overrides?: CallOverrides): Promise<void>;

    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(order: OrderStruct, overrides?: CallOverrides): Promise<void>;

    cancelOrders(
      orders: OrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    fillOrder(
      order: OrderStruct,
      fillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillOrders(
      orders: OrderStruct[],
      fillAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateral(overrides?: CallOverrides): Promise<string>;

    getComplement(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionId(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCtf(overrides?: CallOverrides): Promise<string>;

    getMaxFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderStatus(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<OrderStatusStructOutput>;

    getPolyProxyFactoryImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    getPolyProxyWalletAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProxyFactory(overrides?: CallOverrides): Promise<string>;

    getSafeAddress(_addr: string, overrides?: CallOverrides): Promise<string>;

    getSafeFactory(overrides?: CallOverrides): Promise<string>;

    getSafeFactoryImplementation(overrides?: CallOverrides): Promise<string>;

    hashOrder(order: OrderStruct, overrides?: CallOverrides): Promise<string>;

    incrementNonce(overrides?: CallOverrides): Promise<void>;

    isAdmin(usr: string, overrides?: CallOverrides): Promise<boolean>;

    isOperator(usr: string, overrides?: CallOverrides): Promise<boolean>;

    isValidNonce(
      usr: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    matchOrders(
      takerOrder: OrderStruct,
      makerOrders: OrderStruct[],
      takerFillAmount: BigNumberish,
      makerFillAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isFilledOrCancelled: boolean;
        remaining: BigNumber;
      }
    >;

    parentCollectionId(overrides?: CallOverrides): Promise<string>;

    pauseTrading(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxyFactory(overrides?: CallOverrides): Promise<string>;

    registerToken(
      token: BigNumberish,
      complement: BigNumberish,
      conditionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { complement: BigNumber; conditionId: string }
    >;

    removeAdmin(admin: string, overrides?: CallOverrides): Promise<void>;

    removeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    renounceAdminRole(overrides?: CallOverrides): Promise<void>;

    renounceOperatorRole(overrides?: CallOverrides): Promise<void>;

    safeFactory(overrides?: CallOverrides): Promise<string>;

    setProxyFactory(
      _newProxyFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafeFactory(
      _newSafeFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpauseTrading(overrides?: CallOverrides): Promise<void>;

    validateComplement(
      token: BigNumberish,
      complement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateOrder(order: OrderStruct, overrides?: CallOverrides): Promise<void>;

    validateOrderSignature(
      orderHash: BytesLike,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCharged(address,uint256,uint256)"(
      receiver?: string | null,
      tokenId?: null,
      amount?: null
    ): FeeChargedEventFilter;
    FeeCharged(
      receiver?: string | null,
      tokenId?: null,
      amount?: null
    ): FeeChargedEventFilter;

    "NewAdmin(address,address)"(
      newAdminAddress?: string | null,
      admin?: string | null
    ): NewAdminEventFilter;
    NewAdmin(
      newAdminAddress?: string | null,
      admin?: string | null
    ): NewAdminEventFilter;

    "NewOperator(address,address)"(
      newOperatorAddress?: string | null,
      admin?: string | null
    ): NewOperatorEventFilter;
    NewOperator(
      newOperatorAddress?: string | null,
      admin?: string | null
    ): NewOperatorEventFilter;

    "OrderCancelled(bytes32)"(
      orderHash?: BytesLike | null
    ): OrderCancelledEventFilter;
    OrderCancelled(orderHash?: BytesLike | null): OrderCancelledEventFilter;

    "OrderFilled(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)"(
      orderHash?: BytesLike | null,
      maker?: string | null,
      taker?: string | null,
      makerAssetId?: null,
      takerAssetId?: null,
      makerAmountFilled?: null,
      takerAmountFilled?: null,
      fee?: null
    ): OrderFilledEventFilter;
    OrderFilled(
      orderHash?: BytesLike | null,
      maker?: string | null,
      taker?: string | null,
      makerAssetId?: null,
      takerAssetId?: null,
      makerAmountFilled?: null,
      takerAmountFilled?: null,
      fee?: null
    ): OrderFilledEventFilter;

    "OrdersMatched(bytes32,address,uint256,uint256,uint256,uint256)"(
      takerOrderHash?: BytesLike | null,
      takerOrderMaker?: string | null,
      makerAssetId?: null,
      takerAssetId?: null,
      makerAmountFilled?: null,
      takerAmountFilled?: null
    ): OrdersMatchedEventFilter;
    OrdersMatched(
      takerOrderHash?: BytesLike | null,
      takerOrderMaker?: string | null,
      makerAssetId?: null,
      takerAssetId?: null,
      makerAmountFilled?: null,
      takerAmountFilled?: null
    ): OrdersMatchedEventFilter;

    "ProxyFactoryUpdated(address,address)"(
      oldProxyFactory?: string | null,
      newProxyFactory?: string | null
    ): ProxyFactoryUpdatedEventFilter;
    ProxyFactoryUpdated(
      oldProxyFactory?: string | null,
      newProxyFactory?: string | null
    ): ProxyFactoryUpdatedEventFilter;

    "RemovedAdmin(address,address)"(
      removedAdmin?: string | null,
      admin?: string | null
    ): RemovedAdminEventFilter;
    RemovedAdmin(
      removedAdmin?: string | null,
      admin?: string | null
    ): RemovedAdminEventFilter;

    "RemovedOperator(address,address)"(
      removedOperator?: string | null,
      admin?: string | null
    ): RemovedOperatorEventFilter;
    RemovedOperator(
      removedOperator?: string | null,
      admin?: string | null
    ): RemovedOperatorEventFilter;

    "SafeFactoryUpdated(address,address)"(
      oldSafeFactory?: string | null,
      newSafeFactory?: string | null
    ): SafeFactoryUpdatedEventFilter;
    SafeFactoryUpdated(
      oldSafeFactory?: string | null,
      newSafeFactory?: string | null
    ): SafeFactoryUpdatedEventFilter;

    "TokenRegistered(uint256,uint256,bytes32)"(
      token0?: BigNumberish | null,
      token1?: BigNumberish | null,
      conditionId?: BytesLike | null
    ): TokenRegisteredEventFilter;
    TokenRegistered(
      token0?: BigNumberish | null,
      token1?: BigNumberish | null,
      conditionId?: BytesLike | null
    ): TokenRegisteredEventFilter;

    "TradingPaused(address)"(pauser?: string | null): TradingPausedEventFilter;
    TradingPaused(pauser?: string | null): TradingPausedEventFilter;

    "TradingUnpaused(address)"(
      pauser?: string | null
    ): TradingUnpausedEventFilter;
    TradingUnpaused(pauser?: string | null): TradingUnpausedEventFilter;
  };

  estimateGas: {
    addAdmin(
      admin_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addOperator(
      operator_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelOrders(
      orders: OrderStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(
      order: OrderStruct,
      fillAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fillOrders(
      orders: OrderStruct[],
      fillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getComplement(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionId(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCtf(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderStatus(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolyProxyFactoryImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolyProxyWalletAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getSafeAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSafeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getSafeFactoryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    hashOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAdmin(usr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(usr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidNonce(
      usr: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchOrders(
      takerOrder: OrderStruct,
      makerOrders: OrderStruct[],
      takerFillAmount: BigNumberish,
      makerFillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    orderStatus(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    parentCollectionId(overrides?: CallOverrides): Promise<BigNumber>;

    pauseTrading(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    registerToken(
      token: BigNumberish,
      complement: BigNumberish,
      conditionId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registry(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceAdminRole(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOperatorRole(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    setProxyFactory(
      _newProxyFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSafeFactory(
      _newSafeFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateComplement(
      token: BigNumberish,
      complement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrderSignature(
      orderHash: BytesLike,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      admin_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addOperator(
      operator_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      orders: OrderStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillOrder(
      order: OrderStruct,
      fillAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fillOrders(
      orders: OrderStruct[],
      fillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComplement(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConditionId(
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCtf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderStatus(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolyProxyFactoryImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolyProxyWalletAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafeAddress(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSafeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafeFactoryImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidNonce(
      usr: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchOrders(
      takerOrder: OrderStruct,
      makerOrders: OrderStruct[],
      takerFillAmount: BigNumberish,
      makerFillAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentCollectionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerToken(
      token: BigNumberish,
      complement: BigNumberish,
      conditionId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceAdminRole(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOperatorRole(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setProxyFactory(
      _newProxyFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSafeFactory(
      _newSafeFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateComplement(
      token: BigNumberish,
      complement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrderSignature(
      orderHash: BytesLike,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
