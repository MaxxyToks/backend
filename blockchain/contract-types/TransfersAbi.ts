/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type TransferIntentStruct = {
  recipientAmount: BigNumberish;
  deadline: BigNumberish;
  recipient: string;
  recipientCurrency: string;
  refundDestination: string;
  feeAmount: BigNumberish;
  id: BytesLike;
  operator: string;
  signature: BytesLike;
  prefix: BytesLike;
};

export type TransferIntentStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  string,
  string,
  string,
  string
] & {
  recipientAmount: BigNumber;
  deadline: BigNumber;
  recipient: string;
  recipientCurrency: string;
  refundDestination: string;
  feeAmount: BigNumber;
  id: string;
  operator: string;
  signature: string;
  prefix: string;
};

export type EIP2612SignatureTransferDataStruct = {
  owner: string;
  signature: BytesLike;
};

export type EIP2612SignatureTransferDataStructOutput = [string, string] & {
  owner: string;
  signature: string;
};

export type Permit2SignatureTransferDataStruct = {
  permit: ISignatureTransfer.PermitTransferFromStruct;
  transferDetails: ISignatureTransfer.SignatureTransferDetailsStruct;
  signature: BytesLike;
};

export type Permit2SignatureTransferDataStructOutput = [
  ISignatureTransfer.PermitTransferFromStructOutput,
  ISignatureTransfer.SignatureTransferDetailsStructOutput,
  string
] & {
  permit: ISignatureTransfer.PermitTransferFromStructOutput;
  transferDetails: ISignatureTransfer.SignatureTransferDetailsStructOutput;
  signature: string;
};

export declare namespace ISignatureTransfer {
  export type TokenPermissionsStruct = { token: string; amount: BigNumberish };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitTransferFromStruct = {
    permitted: ISignatureTransfer.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    ISignatureTransfer.TokenPermissionsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    permitted: ISignatureTransfer.TokenPermissionsStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };

  export type SignatureTransferDetailsStruct = {
    to: string;
    requestedAmount: BigNumberish;
  };

  export type SignatureTransferDetailsStructOutput = [string, BigNumber] & {
    to: string;
    requestedAmount: BigNumber;
  };
}

export interface TransfersAbiInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permit2()": FunctionFragment;
    "registerOperator()": FunctionFragment;
    "registerOperatorWithFeeDestination(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSweeper(address)": FunctionFragment;
    "subsidizedTransferToken((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),(address,bytes))": FunctionFragment;
    "swapAndTransferUniswapV3Native((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),uint24)": FunctionFragment;
    "swapAndTransferUniswapV3Token((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),(((address,uint256),uint256,uint256),(address,uint256),bytes),uint24)": FunctionFragment;
    "swapAndTransferUniswapV3TokenPreApproved((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),address,uint256,uint24)": FunctionFragment;
    "sweepETH(address)": FunctionFragment;
    "sweepETHAmount(address,uint256)": FunctionFragment;
    "sweepToken(address,address)": FunctionFragment;
    "sweepTokenAmount(address,address,uint256)": FunctionFragment;
    "sweeper()": FunctionFragment;
    "transferNative((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToken((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),(((address,uint256),uint256,uint256),(address,uint256),bytes))": FunctionFragment;
    "transferTokenPreApproved((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes))": FunctionFragment;
    "unpause()": FunctionFragment;
    "unregisterOperator()": FunctionFragment;
    "unwrapAndTransfer((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes),(((address,uint256),uint256,uint256),(address,uint256),bytes))": FunctionFragment;
    "unwrapAndTransferPreApproved((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes))": FunctionFragment;
    "wrapAndTransfer((uint256,uint256,address,address,address,uint256,bytes16,address,bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "pause"
      | "paused"
      | "permit2"
      | "registerOperator"
      | "registerOperatorWithFeeDestination"
      | "renounceOwnership"
      | "setSweeper"
      | "subsidizedTransferToken"
      | "swapAndTransferUniswapV3Native"
      | "swapAndTransferUniswapV3Token"
      | "swapAndTransferUniswapV3TokenPreApproved"
      | "sweepETH"
      | "sweepETHAmount"
      | "sweepToken"
      | "sweepTokenAmount"
      | "sweeper"
      | "transferNative"
      | "transferOwnership"
      | "transferToken"
      | "transferTokenPreApproved"
      | "unpause"
      | "unregisterOperator"
      | "unwrapAndTransfer"
      | "unwrapAndTransferPreApproved"
      | "wrapAndTransfer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatorWithFeeDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSweeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subsidizedTransferToken",
    values: [TransferIntentStruct, EIP2612SignatureTransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransferUniswapV3Native",
    values: [TransferIntentStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransferUniswapV3Token",
    values: [
      TransferIntentStruct,
      Permit2SignatureTransferDataStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransferUniswapV3TokenPreApproved",
    values: [TransferIntentStruct, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweepETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepETHAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepTokenAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferNative",
    values: [TransferIntentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [TransferIntentStruct, Permit2SignatureTransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenPreApproved",
    values: [TransferIntentStruct]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapAndTransfer",
    values: [TransferIntentStruct, Permit2SignatureTransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapAndTransferPreApproved",
    values: [TransferIntentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapAndTransfer",
    values: [TransferIntentStruct]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatorWithFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSweeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subsidizedTransferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransferUniswapV3Native",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransferUniswapV3Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransferUniswapV3TokenPreApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepETHAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenPreApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapAndTransferPreApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndTransfer",
    data: BytesLike
  ): Result;

  events: {
    "OperatorRegistered(address,address)": EventFragment;
    "OperatorUnregistered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transferred(address,bytes16,address,address,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OperatorRegisteredEventObject {
  operator: string;
  feeDestination: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorUnregisteredEventObject {
  operator: string;
}
export type OperatorUnregisteredEvent = TypedEvent<
  [string],
  OperatorUnregisteredEventObject
>;

export type OperatorUnregisteredEventFilter =
  TypedEventFilter<OperatorUnregisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TransferredEventObject {
  operator: string;
  id: string;
  recipient: string;
  sender: string;
  spentAmount: BigNumber;
  spentCurrency: string;
}
export type TransferredEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  TransferredEventObject
>;

export type TransferredEventFilter = TypedEventFilter<TransferredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TransfersAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransfersAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit2(overrides?: CallOverrides): Promise<[string]>;

    registerOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerOperatorWithFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSweeper(
      newSweeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subsidizedTransferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: EIP2612SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndTransferUniswapV3Native(
      _intent: TransferIntentStruct,
      poolFeesTier: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndTransferUniswapV3Token(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndTransferUniswapV3TokenPreApproved(
      _intent: TransferIntentStruct,
      _tokenIn: string,
      maxWillingToPay: BigNumberish,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepETH(
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepETHAmount(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepToken(
      _token: string,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepTokenAmount(
      _token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweeper(overrides?: CallOverrides): Promise<[string]>;

    transferNative(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferTokenPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unwrapAndTransfer(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unwrapAndTransferPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    wrapAndTransfer(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit2(overrides?: CallOverrides): Promise<string>;

  registerOperator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerOperatorWithFeeDestination(
    _feeDestination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSweeper(
    newSweeper: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subsidizedTransferToken(
    _intent: TransferIntentStruct,
    _signatureTransferData: EIP2612SignatureTransferDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndTransferUniswapV3Native(
    _intent: TransferIntentStruct,
    poolFeesTier: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndTransferUniswapV3Token(
    _intent: TransferIntentStruct,
    _signatureTransferData: Permit2SignatureTransferDataStruct,
    poolFeesTier: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndTransferUniswapV3TokenPreApproved(
    _intent: TransferIntentStruct,
    _tokenIn: string,
    maxWillingToPay: BigNumberish,
    poolFeesTier: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepETH(
    destination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepETHAmount(
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepToken(
    _token: string,
    destination: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepTokenAmount(
    _token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweeper(overrides?: CallOverrides): Promise<string>;

  transferNative(
    _intent: TransferIntentStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferToken(
    _intent: TransferIntentStruct,
    _signatureTransferData: Permit2SignatureTransferDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferTokenPreApproved(
    _intent: TransferIntentStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unregisterOperator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unwrapAndTransfer(
    _intent: TransferIntentStruct,
    _signatureTransferData: Permit2SignatureTransferDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unwrapAndTransferPreApproved(
    _intent: TransferIntentStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  wrapAndTransfer(
    _intent: TransferIntentStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit2(overrides?: CallOverrides): Promise<string>;

    registerOperator(overrides?: CallOverrides): Promise<void>;

    registerOperatorWithFeeDestination(
      _feeDestination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSweeper(newSweeper: string, overrides?: CallOverrides): Promise<void>;

    subsidizedTransferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: EIP2612SignatureTransferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndTransferUniswapV3Native(
      _intent: TransferIntentStruct,
      poolFeesTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndTransferUniswapV3Token(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      poolFeesTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndTransferUniswapV3TokenPreApproved(
      _intent: TransferIntentStruct,
      _tokenIn: string,
      maxWillingToPay: BigNumberish,
      poolFeesTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepETH(destination: string, overrides?: CallOverrides): Promise<void>;

    sweepETHAmount(
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToken(
      _token: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepTokenAmount(
      _token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweeper(overrides?: CallOverrides): Promise<string>;

    transferNative(
      _intent: TransferIntentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenPreApproved(
      _intent: TransferIntentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unregisterOperator(overrides?: CallOverrides): Promise<void>;

    unwrapAndTransfer(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapAndTransferPreApproved(
      _intent: TransferIntentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapAndTransfer(
      _intent: TransferIntentStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OperatorRegistered(address,address)"(
      operator?: null,
      feeDestination?: null
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      operator?: null,
      feeDestination?: null
    ): OperatorRegisteredEventFilter;

    "OperatorUnregistered(address)"(
      operator?: null
    ): OperatorUnregisteredEventFilter;
    OperatorUnregistered(operator?: null): OperatorUnregisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Transferred(address,bytes16,address,address,uint256,address)"(
      operator?: string | null,
      id?: null,
      recipient?: null,
      sender?: null,
      spentAmount?: null,
      spentCurrency?: null
    ): TransferredEventFilter;
    Transferred(
      operator?: string | null,
      id?: null,
      recipient?: null,
      sender?: null,
      spentAmount?: null,
      spentCurrency?: null
    ): TransferredEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerOperatorWithFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSweeper(
      newSweeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subsidizedTransferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: EIP2612SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndTransferUniswapV3Native(
      _intent: TransferIntentStruct,
      poolFeesTier: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndTransferUniswapV3Token(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndTransferUniswapV3TokenPreApproved(
      _intent: TransferIntentStruct,
      _tokenIn: string,
      maxWillingToPay: BigNumberish,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepETH(
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepETHAmount(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepToken(
      _token: string,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepTokenAmount(
      _token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweeper(overrides?: CallOverrides): Promise<BigNumber>;

    transferNative(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferTokenPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    unregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unwrapAndTransfer(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unwrapAndTransferPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    wrapAndTransfer(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerOperatorWithFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSweeper(
      newSweeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subsidizedTransferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: EIP2612SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndTransferUniswapV3Native(
      _intent: TransferIntentStruct,
      poolFeesTier: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndTransferUniswapV3Token(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndTransferUniswapV3TokenPreApproved(
      _intent: TransferIntentStruct,
      _tokenIn: string,
      maxWillingToPay: BigNumberish,
      poolFeesTier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepETH(
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepETHAmount(
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      _token: string,
      destination: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepTokenAmount(
      _token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferNative(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferToken(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferTokenPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unregisterOperator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unwrapAndTransfer(
      _intent: TransferIntentStruct,
      _signatureTransferData: Permit2SignatureTransferDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unwrapAndTransferPreApproved(
      _intent: TransferIntentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    wrapAndTransfer(
      _intent: TransferIntentStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
