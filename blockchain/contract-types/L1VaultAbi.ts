/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L1VaultAbiInterface extends utils.Interface {
  functions: {
    "deposit(address,uint256)": FunctionFragment;
    "tokenDeposits(address)": FunctionFragment;
    "tokenMetadata(address)": FunctionFragment;
    "userDeposits(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "tokenDeposits"
      | "tokenMetadata"
      | "userDeposits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;

  events: {};
}

export interface L1VaultAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1VaultAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenDeposits(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    tokenMetadata(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<[string] & { metadata: string }>;

    userDeposits(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  deposit(
    token_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenDeposits(
    erc20Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenMetadata(
    erc20Address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  userDeposits(
    erc20Address: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    deposit(
      token_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenDeposits(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMetadata(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userDeposits(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    deposit(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenDeposits(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMetadata(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDeposits(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenDeposits(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMetadata(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDeposits(
      erc20Address: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
